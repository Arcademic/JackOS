// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array powersOfTwo;
    static bool colorIsBlack;

    /** Initializes the Screen. */
    function void init() {
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = ~32767;
        let colorIsBlack = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        while (i < 8192) {
            do Memory.poke(16384 + i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let colorIsBlack = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, xMod16;

        let address = 16384 + (32*y) + (x/16);
        let value = Memory.peek(address);
        let xMod16 = x & 15;
        
        if (colorIsBlack) {
            let value = value | powersOfTwo[xMod16];
        } else {
            let value = value & ~powersOfTwo[xMod16];
        }

        do Memory.poke(address, value);
        
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, diff;

        if (x1 > x2) {
            // swap (x1, y1) and (x2, y2)
            let diff = x1;
            let x1 = x2;
            let x2 = diff;
            let diff = y1;
            let y1 = y2;
            let y2 = diff;
        }

        let x = x1;
        let y = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx = 0) {
            // draw vertical line
            if (dy < 0) {
                let diff = y1;
                let y1 = y2;
                let y2 = diff;
            }
            let dy = y1; 
            while (~(dy > y2)) {
                do Screen.drawPixel(x1, dy);
                let dy = dy + 1;
            }
            return;
        }
        if (dy = 0) {
            // draw horizontal line
            let dx = x1; 
            while (~(dx > x2)) {
                do Screen.drawPixel(dx, y1);
                let dx = dx + 1;
            }
            return;
        }
        
        if (dy > 0) {
            while (~(a>dx) & ~(b>dy)) {
                do Screen.drawPixel(x+a, y+b);
                let diff = (a*dy) - (b*dx);

                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        } else {
            let dy = -dy;
            while (~(a>dx) & ~(b>dy)) {
                do Screen.drawPixel(x+a, y-b);
                let diff = (a*dy) - (b*dx);

                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int tmp;

        if (x1 > x2) {
            // swap x1, x2
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
        }

        while (~(x1 > x2)) {
            do Screen.drawLine(x1, y1, x1, y2);
            let x1 = x1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, width;

        if (r > 181) {
            return;
        }

        let dy = -r;
        while (~(dy > r)) {
            let width = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawLine(x-width, y+dy, x+width, y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
